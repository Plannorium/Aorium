generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?     @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  accounts             Account[]
  sessions             Session[]
  onboarding           Onboarding?
  files                File[]
  analysisResults      AnalysisResult[]
  chats                Chat[]
  otp                  String?
  otpExpiry            DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  isUser    Boolean
  createdAt DateTime @default(now())
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Onboarding {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  step         Int       @default(1)
  completed    Boolean   @default(false)
  businessName String?
  businessType String?
  businessSize String?
  region       String?
  goals        String[]  @default([])
  uploadedFiles       Json[]    @default([])
  competitors         String? 
  targetAudience      String? 
  industryChallenges  String? 
  contentFocus        String[]  @default([]) 
  preferredPlatforms  String[]  @default([]) 
  contentKPIs         String[]  @default([]) 
}

model File {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId         String   @db.ObjectId
  filename        String
  url             String
  publicId        String?
  mime            String?
  size            Int?
  section         String?
  uploadedAt      DateTime?
  owner           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model AnalysisResult {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  task       String
  result     String
  context    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}